import { Auto, IPlugin } from '@auto-it/core';
import * as t from "io-ts";
interface ReleaseTypeArgs {
    /** Args to use when invoking the publishScript during the publish hook */
    publish: string[];
    /** Args to use when invoking the publishScript during the canary hook */
    canary: string[];
    /** Args to use when invoking the publishScript during the next hook */
    next: string[];
}
declare const pluginOptions: t.PartialC<{
    /** Path to file (from where auto is executed) where the version is stored */
    versionFile: t.StringC;
    /** Optional script that executes release pipeline stages */
    publishScript: t.StringC;
    /** Optional publish script args mapping for each release hook, defaults `publish` to ["release"] and the others to ["snapshot"] */
    publishScriptReleaseTypeArgs: t.PartialC<{
        publish: t.ArrayC<t.StringC>;
        canary: t.ArrayC<t.StringC>;
        next: t.ArrayC<t.StringC>;
    }>;
}>;
export declare type IVersionFilePluginOptions = t.TypeOf<typeof pluginOptions>;
/**  Plugin to orchestrate releases in a repo where version is maintained in a flat file */
export default class VersionFilePlugin implements IPlugin {
    /** The name of the plugin */
    name: string;
    /** Version file location */
    readonly versionFile: string;
    /** Release script location */
    readonly publishScript: string | undefined;
    /** Args to pass to the release script based on release type */
    readonly publishScriptReleaseTypeArgs: ReleaseTypeArgs;
    /** Initialize the plugin with it's options */
    constructor(options: IVersionFilePluginOptions);
    /** Tap into auto plugin points. */
    apply(auto: Auto): void;
}
export {};
//# sourceMappingURL=index.d.ts.map